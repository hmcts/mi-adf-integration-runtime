name: HMCTS Management Information ADF Self Hosted Integration Runtime Image
trigger:
  - master

pool:
  vmImage: 'windows-2019'

parameters:
  - name: pushImage
    displayName: Push Docker Image To ACR
    type: boolean
    default: false
  - name: fortifyScan
    displayName: Run Fortify scan
    type: boolean
    default: true
  - name: fortifyQualityGateLevel
    displayName: Fortify quality gate level (0 for non-blocking)
    type: number
    default: 1

variables:
  projectName: 'mi'
  applicationName: 'adf-integration-runtime'
  azureSubscriptionEndpoint: 'DTS-SHAREDSERVICES-PROD'
  azureContainerRegistry: 'sdshmctspublic.azurecr.io'
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}: 
    deployTarget: prod
  ${{ if not(eq(variables['Build.SourceBranchName'], 'master')) }}: 
    deployTarget: dev
  devAzureSubscriptionEndpoint: 'DTS-SHAREDSERVICES-DEV'
  devVaultName: 'mi-vault-dev'

stages:
  - stage: BuildAndPush
    jobs:
      
      - job: BuildAndPush
        steps:
          - ${{ if parameters.fortifyScan }}:
            - template: pipeline-steps/templates/steps/fortify-scan.yaml@mi-core
              parameters:
                azureSubscriptionEndpoint: $(testAzureSubscriptionEndpoint)
                azureVault: $(testVaultName)
                applicationName: $(projectName)-$(applicationName)
                qualityGateLevel: ${{ parameters.fortifyQualityGateLevel }}
          - bash: |
              repo_sha=$(git rev-parse --verify HEAD)
              docker_image_tag_sha=${repo_sha:0:7}
              last_commit_time=$(git log -1 --pretty='%cd' --date=iso | tr -d '+[:space:]:-' | head -c 14)
              echo "##vso[task.setvariable variable=DOCKER_TAG;isOutput=true]${docker_image_tag_sha}-${last_commit_time}"
            displayName: 'Get Docker Tag'
            name: 'getDockerTag'
          - task: Docker@1
            displayName: 'Docker Login'
            inputs:
              azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
              azureContainerRegistry: $(azureContainerRegistry)
              command: login
          - task: Docker@1
            displayName: 'Build Docker Image'
            inputs:
              imageName: '$(azureContainerRegistry)/$(projectName)/$(applicationName):$(deployTarget)-$(getDockerTag.DOCKER_TAG)'
              command: build
              Dockerfile: ./Dockerfile
          - task: Docker@1
            condition: or(eq(variables['Build.SourceBranchName'], 'master'), eq(${{ parameters.pushImage }}, true))
            displayName: 'Push Docker Image'
            inputs:
              azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
              azureContainerRegistry: $(azureContainerRegistry)
              command: push
              imageName: '$(projectName)/$(applicationName):$(deployTarget)-$(getDockerTag.DOCKER_TAG)'
          - task: Docker@1
            displayName: 'Docker Logout'
            inputs:
              command: logout
